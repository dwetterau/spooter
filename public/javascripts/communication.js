// Generated by CoffeeScript 1.8.0
(function() {
  var getPlayerId, initialize, lastStateReceivedTime, move, numStateUpdates, serializer, setState, shoot, socket, totalStateTime;

  socket = io('http://localhost:3001');

  socket.on('initialize', function(data) {
    return initialize(data);
  });

  serializer = null;

  socket.on('state', function(data) {
    if (serializer) {
      return setState(serializer.toObject(data, window.spooter.state.newState));
    } else {
      if (window.spooter.StateSerializer != null) {
        return serializer = new window.spooter.StateSerializer();
      }
    }
  });

  move = function(ax, ay) {
    var angle, buffer, byteView, playerId;
    playerId = getPlayerId();
    angle = -Math.atan2(ay, ax);
    if (angle < 0) {
      angle += Math.PI * 2;
    }
    angle = Math.round(angle / ((2 * Math.PI) / 255));
    buffer = new ArrayBuffer(2);
    byteView = new Uint8Array(buffer);
    byteView[0] = playerId;
    byteView[1] = angle;
    return socket.emit("move", buffer);
  };

  shoot = function() {
    var playerId;
    playerId = getPlayerId();
    return socket.emit("shoot", {
      playerId: playerId
    });
  };

  getPlayerId = function() {
    return window.spooter.playerId;
  };

  initialize = function(data) {
    var playerId, worldHeight, worldWidth;
    worldHeight = data.worldHeight, worldWidth = data.worldWidth, playerId = data.playerId;
    window.spooter.state = {
      drawState: {},
      newState: {}
    };
    window.spooter.playerId = playerId;
    window.spooter.worldHeight = worldHeight;
    window.spooter.worldWidth = worldWidth;
    return window.spooter.initialized = false;
  };

  lastStateReceivedTime = 0;

  totalStateTime = 0;

  numStateUpdates = 0.0;

  setState = function(newState) {
    var now, oldState, time;
    now = new Date().getTime();
    if (lastStateReceivedTime !== 0) {
      time = now - lastStateReceivedTime;
      totalStateTime += time;
      numStateUpdates++;
      if (Math.random() < .001) {
        console.log("Average state update interval", totalStateTime / numStateUpdates);
      }
    }
    lastStateReceivedTime = now;
    oldState = window.spooter.state.drawState;
    window.spooter.state.drawState = newState;
    window.spooter.state.newState = oldState;
    return window.spooter.initialized = true;
  };

  window.spooter = {
    initialized: false,
    move: move,
    shoot: shoot,
    state: {
      drawState: {},
      newState: {}
    }
  };

}).call(this);

//# sourceMappingURL=communication.js.map
